CREATE TABLE Action (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Name VARCHAR(64) UNIQUE NOT NULL
);

CREATE TABLE ActorRank (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Name VARCHAR(64) NOT NULL,
	Rank INT NOT NULL
);

CREATE TABLE Privileges (
	ActorRank INT NOT NULL,
	Action INT NOT NULL,
	PRIMARY KEY (ActorRank, Action),
	FOREIGN KEY (ActorRank) REFERENCES ActorRank(ID),
	FOREIGN KEY (Action) REFERENCES Action(ID)
);

CREATE TABLE Actor (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	FirstName VARCHAR(64) NOT NULL,
	LastName VARCHAR(64) NOT NULL,
	Email VARCHAR(64) UNIQUE NOT NULL,
	Username VARCHAR(64) UNIQUE NOT NULL,
	Password VARCHAR(64) NOT NULL,
	BirthDate DATE NOT NULL,
	Tokens DECIMAL NOT NULL DEFAULT 0,
	Banned TINYINT(1) NOT NULL DEFAULT 0,
	ActorRank INT NOT NULL,
	FOREIGN KEY (ActorRank) REFERENCES ActorRank(ID)
);

CREATE TABLE ActorReview (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Grade INT NOT NULL,
	Description VARCHAR(64) NOT NULL,
	Reviewer INT NOT NULL,
	Reviewee INT NOT NULL,
	FOREIGN KEY (Reviewer) REFERENCES Actor(ID),
	FOREIGN KEY (Reviewee) REFERENCES Actor(ID)
);



CREATE TABLE Subject (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Name VARCHAR(64) NOT NULL,
	Description VARCHAR(64) NULL,
	Deleted TINYINT(1) NOT NULL DEFAULT 0
);

CREATE TABLE Section (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Name VARCHAR(64) NOT NULL,
	Description VARCHAR(64) NULL,
	Subject INT NOT NULL,
	Deleted TINYINT(1) NOT NULL DEFAULT 0,
	FOREIGN KEY (Subject) REFERENCES Subject(ID)
);

CREATE TABLE Post (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Title VARCHAR(64) NOT NULL,
	PostedOn DATE NOT NULL,
	OriginalPoster INT NOT NULL,
	Active TINYINT(1) NOT NULL DEFAULT 1,
	Deleted TINYINT(1) NOT NULL DEFAULT 0,
	FOREIGN KEY (OriginalPoster) REFERENCES Actor(ID)
);

CREATE TABLE Reply (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Message VARCHAR(64) NOT NULL,
	PostedOn DATE NOT NULL,
	Post INT NOT NULL,
	Actor INT NOT NULL,
	Deleted TINYINT(1) NOT NULL DEFAULT 0,
	FOREIGN KEY (Post) REFERENCES Post(ID),
	FOREIGN KEY (Actor) REFERENCES Actor(ID)
);

CREATE TABLE PostSections (
	Post INT NOT NULL,
	Section INT NOT NULL,
	PRIMARY KEY (Post, Section),
	FOREIGN KEY (Post) REFERENCES Post(ID),
	FOREIGN KEY (Section) REFERENCES Section(ID)
);

CREATE TABLE SectionSubscriptions (
	Actor INT NOT NULL,
	Section INT NOT NULL,
	PRIMARY KEY (Actor, Section),
	FOREIGN KEY (Actor) REFERENCES Actor(ID),
	FOREIGN KEY (Section) REFERENCES Section(ID)
);



CREATE TABLE QAPost (
	ID INT PRIMARY KEY NOT NULL,
	Description VARCHAR(64) NOT NULL,
	AcceptedAnswer INT NULL,
	FOREIGN KEY (ID) REFERENCES Post(ID),
	FOREIGN KEY (AcceptedAnswer) REFERENCES Reply(ID)
);

CREATE TABLE WorkPost (
	ID INT PRIMARY KEY NOT NULL,
	Description VARCHAR(64) NOT NULL,
	Worker INT NULL,
	ComittedTokens DECIMAL NULL,
	WorkerAccepted TINYINT(1) NOT NULL DEFAULT 0,
	FOREIGN KEY (ID) REFERENCES Post(ID),
	FOREIGN KEY (Worker) REFERENCES Actor(ID)
);



CREATE TABLE Notification (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Actor INT NOT NULL,
	Seen TINYINT(1) NOT NULL DEFAULT 0,
	Title VARCHAR(64) NOT NULL,
	Content VARCHAR(64) NOT NULL,
	FOREIGN KEY (Actor) REFERENCES Actor(ID)
);

CREATE TABLE PromotionRequests (
	ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
	Title VARCHAR(64) NOT NULL,
	Description VARCHAR(64) NOT NULL,
	SubmittedOn DATE NOT NULL,
	Accepted TINYINT(1) NULL,
	Actor INT NOT NULL,
	FOREIGN KEY (Actor) REFERENCES Actor(ID)
);